name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: v2.1.0)'
        required: true
        default: 'v2.1.0'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for Windows
      if: matrix.os == 'windows-latest'
      run: |
        npm run build-win
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build for macOS
      if: matrix.os == 'macos-latest'
      run: |
        npm run build-mac
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CSC_IDENTITY_AUTO_DISCOVERY: false
        
    - name: Build for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        npm run build-linux
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: |
          dist/*.exe
          dist/*.msi
          
    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: |
          dist/*.dmg
          dist/*.zip
          
    - name: Upload Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: |
          dist/*.AppImage
          dist/*.deb
          dist/*.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Display structure of downloaded files
      run: ls -la
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        release_name: Teams翻译助手 ${{ github.event.inputs.version || github.ref_name }}
        body: |
          ## Teams翻译助手 ${{ github.event.inputs.version || github.ref_name }}
          
          ### 🎉 新版本发布
          
          #### ✨ 主要功能
          - 🌿 **绿色软件**：配置文件保存在程序目录下，便携使用
          - 📋 **剪贴板监听**：自动监听剪贴板变化，复制即翻译
          - 🤖 **多AI模型**：支持OpenAI和DeepSeek多种模型
          - 🎨 **字体样式配置**：可自定义翻译结果的字体样式
          - 📚 **术语词典**：支持自定义术语，提高翻译准确性
          - 💰 **成本统计**：实时显示翻译成本
          - 📖 **翻译历史**：保存翻译记录
          
          #### 📦 下载说明
          - **Windows用户**：下载 `Teams翻译助手-*-x64-setup.exe` (安装版) 或 `Teams翻译助手-*-x64-portable.exe` (便携版)
          - **macOS用户**：下载 `Teams翻译助手-*-x64.dmg` 或 `Teams翻译助手-*-arm64.dmg`
          - **Linux用户**：下载 `Teams翻译助手-*-x64.AppImage` (推荐) 或 `.deb` 包
          
          #### 🚀 快速开始
          1. 下载对应平台的安装包
          2. 安装或解压运行
          3. 配置OpenAI或DeepSeek API Key
          4. 启用剪贴板监听
          5. 开始翻译！
          
          #### 🔧 技术规格
          - 基于Electron构建的跨平台应用
          - 支持Windows 10+、macOS 10.14+、Ubuntu 18.04+
          - 绿色软件，配置跟随程序
        draft: false
        prerelease: false
        
    - name: Upload Windows Setup
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: windows-build/Teams翻译助手-${{ github.event.inputs.version || github.ref_name }}-x64-setup.exe
        asset_name: Teams翻译助手-${{ github.event.inputs.version || github.ref_name }}-x64-setup.exe
        asset_content_type: application/octet-stream
      continue-on-error: true
      
    - name: Upload Windows Portable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: windows-build/Teams翻译助手-${{ github.event.inputs.version || github.ref_name }}-x64-portable.exe
        asset_name: Teams翻译助手-${{ github.event.inputs.version || github.ref_name }}-x64-portable.exe
        asset_content_type: application/octet-stream
      continue-on-error: true
      
    - name: Upload macOS DMG x64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: macos-build/Teams翻译助手-${{ github.event.inputs.version || github.ref_name }}-x64.dmg
        asset_name: Teams翻译助手-${{ github.event.inputs.version || github.ref_name }}-x64.dmg
        asset_content_type: application/octet-stream
      continue-on-error: true
      
    - name: Upload macOS DMG arm64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: macos-build/Teams翻译助手-${{ github.event.inputs.version || github.ref_name }}-arm64.dmg
        asset_name: Teams翻译助手-${{ github.event.inputs.version || github.ref_name }}-arm64.dmg
        asset_content_type: application/octet-stream
      continue-on-error: true
      
    - name: Upload Linux AppImage
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: linux-build/Teams翻译助手-${{ github.event.inputs.version || github.ref_name }}-x64.AppImage
        asset_name: Teams翻译助手-${{ github.event.inputs.version || github.ref_name }}-x64.AppImage
        asset_content_type: application/octet-stream
      continue-on-error: true
      
    - name: Upload Linux DEB
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: linux-build/Teams翻译助手-${{ github.event.inputs.version || github.ref_name }}-x64.deb
        asset_name: Teams翻译助手-${{ github.event.inputs.version || github.ref_name }}-x64.deb
        asset_content_type: application/octet-stream
      continue-on-error: true 